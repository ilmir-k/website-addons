From 15bf41270d3abb607e7b623b59355594cad170cf Mon Sep 17 00:00:00 2001
From: Jairo Llopis <yajo.sk8@gmail.com>
Date: Wed, 26 Jul 2017 13:52:26 +0200
Subject: [PATCH 1/3] [FIX] website: Make Qweb cache website dependent

Without this patch, all Qweb cache is shared among all available websites.
This turns impossible in practice to actually create multiple websites with
different look.

This closes odoo/odoo#18462
---
 odoo/addons/base/ir/ir_qweb/ir_qweb.py | 6 +++---
 odoo/addons/base/ir/ir_ui_view.py      | 2 +-
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/odoo/addons/base/ir/ir_qweb/ir_qweb.py b/odoo/addons/base/ir/ir_qweb/ir_qweb.py
index ddb1c64..a3e63df 100644
--- a/odoo/addons/base/ir/ir_qweb/ir_qweb.py
+++ b/odoo/addons/base/ir/ir_qweb/ir_qweb.py
@@ -62,7 +62,7 @@ class IrQWeb(models.AbstractModel, QWeb):
     # assume cache will be invalidated by third party on write to ir.ui.view
     def _get_template_cache_keys(self):
         """ Return the list of context keys to use for caching ``_get_template``. """
-        return ['lang', 'inherit_branding', 'editable', 'translatable', 'edit_translations']
+        return ['lang', 'inherit_branding', 'editable', 'translatable', 'edit_translations', 'website_id']
 
     # apply ormcache_context decorator unless in dev mode...
     @tools.conditional(
@@ -186,14 +186,14 @@ class IrQWeb(models.AbstractModel, QWeb):
         # in non-xml-debug mode we want assets to be cached forever, and the admin can force a cache clear
         # by restarting the server after updating the source code (or using the "Clear server cache" in debug tools)
         'xml' not in tools.config['dev_mode'],
-        tools.ormcache('xmlid', 'options.get("lang", "en_US")', 'css', 'js', 'debug', 'async'),
+        tools.ormcache_context('xmlid', 'options.get("lang", "en_US")', 'css', 'js', 'debug', 'async', keys=("website_id",)),
     )
     def _get_asset(self, xmlid, options, css=True, js=True, debug=False, async=False, values=None):
         files, remains = self._get_asset_content(xmlid, options)
         asset = AssetsBundle(xmlid, files, remains, env=self.env)
         return asset.to_html(css=css, js=js, debug=debug, async=async, url_for=(values or {}).get('url_for', lambda url: url))
 
-    @tools.ormcache('xmlid', 'options.get("lang", "en_US")')
+    @tools.ormcache_context('xmlid', 'options.get("lang", "en_US")', keys=("website_id",))
     def _get_asset_content(self, xmlid, options):
         options = dict(options,
             inherit_branding=False, inherit_branding_auto=False,
diff --git a/odoo/addons/base/ir/ir_ui_view.py b/odoo/addons/base/ir/ir_ui_view.py
index 66cf87c..edbaf5b 100644
--- a/odoo/addons/base/ir/ir_ui_view.py
+++ b/odoo/addons/base/ir/ir_ui_view.py
@@ -912,7 +912,7 @@ actual arch.
 
     def _read_template_keys(self):
         """ Return the list of context keys to use for caching ``_read_template``. """
-        return ['lang', 'inherit_branding', 'editable', 'translatable', 'edit_translations']
+        return ['lang', 'inherit_branding', 'editable', 'translatable', 'edit_translations', 'website_id']
 
     # apply ormcache_context decorator unless in dev mode...
     @api.model
-- 
2.1.4


From 48fe0a595308722a26afd5361432f24c610b4ba0 Mon Sep 17 00:00:00 2001
From: Jairo Llopis <yajo.sk8@gmail.com>
Date: Mon, 3 Jul 2017 10:51:04 +0200
Subject: [PATCH 2/3] [FIX] website: get website-specific view ids if available

In a multiwebsite environment, (de)activating some theme views produces
undesired results if the same view exists in different ways for different
websites.

With this patch, we search before for a website-specific view with the provided
 key, and fall back to the XMLID-found one if there is no specific view.

This commit closes odoo/odoo#17970
---
 addons/website/controllers/main.py | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/addons/website/controllers/main.py b/addons/website/controllers/main.py
index 1e5e5a0..ce9c704 100644
--- a/addons/website/controllers/main.py
+++ b/addons/website/controllers/main.py
@@ -317,9 +317,14 @@ class Website(Home):
 
     def get_view_ids(self, xml_ids):
         ids = []
+        View = request.env["ir.ui.view"].with_context(active_test=False)
         for xml_id in xml_ids:
             if "." in xml_id:
-                record_id = request.env.ref(xml_id).id
+                # Get website-specific view if possible
+                record_id = View.search([
+                    ("website_id", "=", request.website.id),
+                    ("key", "=", xml_id),
+                ]).id or request.env.ref(xml_id).id
             else:
                 record_id = int(xml_id)
             ids.append(record_id)
-- 
2.1.4


From 7c6714d7fee4125f037ef194f9cff5235a6c5320 Mon Sep 17 00:00:00 2001
From: Jairo Llopis <yajo.sk8@gmail.com>
Date: Thu, 15 Jun 2017 11:26:15 +0200
Subject: [PATCH 3/3] [FIX] website: check website_id on view when applying
 inheritances.

Before this patch, if some view had both `inherit_id` and `website_id`,
its inheritances were being applied even in different websites.

After this patch, if a view inherits from another, inheritances will only apply
 when both views belong to the same (or none) website.

Refactoring based on the pr #17635
This closes odoo/odoo#17635
---
 addons/website/models/ir_ui_view.py |  5 +++++
 odoo/addons/base/ir/ir_ui_view.py   | 16 ++++++++++------
 2 files changed, 15 insertions(+), 6 deletions(-)

diff --git a/addons/website/models/ir_ui_view.py b/addons/website/models/ir_ui_view.py
index 3237b1f..02a7297 100644
--- a/addons/website/models/ir_ui_view.py
+++ b/addons/website/models/ir_ui_view.py
@@ -70,6 +70,11 @@ class View(models.Model):
         return view_id
 
     @api.model
+    def _get_inheriting_views_arch_domain(self, view_id, model):
+        domain = super(View, self)._get_inheriting_views_arch_domain(view_id, model)
+        return ['|', ('website_id', '=', False), ('website_id', '=', self.env.context.get('website_id'))] + domain
+
+    @api.model
     @tools.ormcache_context('self._uid', 'xml_id', keys=('website_id',))
     def get_view_id(self, xml_id):
         if 'website_id' in self._context and not isinstance(xml_id, (int, long)):
diff --git a/odoo/addons/base/ir/ir_ui_view.py b/odoo/addons/base/ir/ir_ui_view.py
index edbaf5b..2bef251 100644
--- a/odoo/addons/base/ir/ir_ui_view.py
+++ b/odoo/addons/base/ir/ir_ui_view.py
@@ -404,6 +404,15 @@ actual arch.
     # Inheritance mecanism
     #------------------------------------------------------
     @api.model
+    def _get_inheriting_views_arch_domain(self, view_id, model):
+        return [
+            ['inherit_id', '=', view_id],
+            ['model', '=', model],
+            ['mode', '=', 'extension'],
+            ['active', '=', True],
+        ]
+
+    @api.model
     def get_inheriting_views_arch(self, view_id, model):
         """Retrieves the architecture of views that inherit from the given view, from the sets of
            views that should currently be used in the system. During the module upgrade phase it
@@ -418,13 +427,8 @@ actual arch.
            :return: [(view_arch,view_id), ...]
         """
         user_groups = self.env.user.groups_id
+        conditions = self._get_inheriting_views_arch_domain(view_id, model)
 
-        conditions = [
-            ['inherit_id', '=', view_id],
-            ['model', '=', model],
-            ['mode', '=', 'extension'],
-            ['active', '=', True],
-        ]
         if self.pool._init and not self._context.get('load_all_views'):
             # Module init currently in progress, only consider views from
             # modules whose code is already loaded
-- 
2.1.4

